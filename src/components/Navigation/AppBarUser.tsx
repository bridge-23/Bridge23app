//..src/components/AppBarUser.tsximport React, {useContext} from 'react';import { useRouter } from 'next/router';import { styled, useTheme, Theme, CSSObject } from '@mui/material/styles';import {  IconButton, Box, Divider, List, Dialog, ListItemText, ListItemButton, ListItem, CssBaseline} from '@mui/material';import MuiDrawer from '@mui/material/Drawer';import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';import ChevronRightIcon from '@mui/icons-material/ChevronRight';import ListItemIcon from '@mui/material/ListItemIcon';import AccountBalanceIcon from '@mui/icons-material/AccountBalance';import AddIcon from '@mui/icons-material/Add';import ChecklistIcon from '@mui/icons-material/Checklist';import HomeIcon from '@mui/icons-material/Home';import StarIcon from '@mui/icons-material/Star';import FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';import MoreVertIcon from "@mui/icons-material/MoreVert";import SettingsIcon from '@mui/icons-material/Settings';import HelpCenterIcon from '@mui/icons-material/HelpCenter';import CardGiftcardIcon from '@mui/icons-material/CardGiftcard';import LogoutIcon from '@mui/icons-material/Logout';import TransactionList from './TransactionList';import { signOut } from '@junobuild/core-peer';import {AuthContext} from "../../contexts/AuthContext";const drawerWidth = 240;const openedMixin = (theme: Theme): CSSObject => ({    width: drawerWidth,    transition: theme.transitions.create('width', {        easing: theme.transitions.easing.sharp,        duration: theme.transitions.duration.enteringScreen,    }),    overflowX: 'hidden',});const closedMixin = (theme: Theme): CSSObject => ({    transition: theme.transitions.create('width', {        easing: theme.transitions.easing.sharp,        duration: theme.transitions.duration.leavingScreen,    }),    overflowX: 'hidden',    width: `calc(${theme.spacing(7)} + 1px)`,    [theme.breakpoints.up('sm')]: {        width: `calc(${theme.spacing(8)} + 1px)`,    },});const DrawerHeader = styled('div')(({ theme }) => ({    display: 'flex',    alignItems: 'center',    justifyContent: 'flex-end',    padding: theme.spacing(0, 1),    // necessary for content to be below app bar    ...theme.mixins.toolbar,}));const Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(    ({ theme, open }) => ({        width: drawerWidth,        flexShrink: 0,        whiteSpace: 'nowrap',        boxSizing: 'border-box',        ...(open && {            ...openedMixin(theme),            '& .MuiDrawer-paper': openedMixin(theme),        }),        ...(!open && {            ...closedMixin(theme),            '& .MuiDrawer-paper': closedMixin(theme),        }),    }),);export default function AppBarUser() {    const router = useRouter();    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);    const theme = useTheme();    const [open, setOpen] = React.useState(false); // For the drawer    const [dialogOpen, setDialogOpen] = React.useState(false); // For the dialog/modal    const items = ['New', 'Get Infinity', 'Dashboard', 'Accounts', 'Shopping List', 'Transactions', 'Rewards', 'More Options', 'Settings', 'Help center', 'Sign out'];    const { userKey } = router.query;    const { user } = useContext(AuthContext);    const handleModalOpen = () => {        setDialogOpen(true);    };    const handleModalClose = () => {        setDialogOpen(false);    };    const navigateTo = (path: string) => {        router.push(path);    };    const handleSignOut = async () => {        try {            await signOut(); // Your signOut logic            console.log("Sign-out successful!");            // Redirect to the desired path after sign out            router.push('/'); // Adjust the path as needed        } catch (error) {            console.error("Sign-out failed:", error);        }    };    const getHrefForItem = (text: string) => {        switch (text) {            case 'New':                handleModalOpen();                break;            case 'Get Infinity':                navigateTo('/get-infinity');                break;            case 'Dashboard':                if (user && user.key) {                navigateTo(`/dashboard/${user.key}`);                } else {                    // Handle the case where user or user.key is undefined or null.                    // Perhaps redirect to a default shopping list or show an error message.                }                break;            case 'Accounts':                navigateTo(`/accounts`);                break;            case 'Shopping List':                if (user && user.key) {                    navigateTo(`/shoppinglist/${user.key}`);                } else {                }                break;            case 'Transactions':                navigateTo(`/tokenslist`);                break;            case 'Rewards':                navigateTo(`/rewards`);                break;            case 'More Options':                navigateTo('/more-options');                break;            case 'Settings':                navigateTo('/settings');                break;            case 'Help center':                navigateTo('/help-center');                break;            case 'Sign out':                handleSignOut ();                break;            default:                navigateTo('/');                break;        }    }    const getIconForItem = (text: string) => {        switch (text) {            case 'New':                return <AddIcon/>;            case 'Get Infinity':                return <StarIcon/>;            case 'Dashboard':                return <HomeIcon/>;            case 'Accounts':                return <AccountBalanceIcon/>;            case 'Shopping List':                return <ChecklistIcon/>;            case 'Tokens':                return <FormatListBulletedIcon/>;            case 'Rewards':                return <CardGiftcardIcon/>;            case 'More Options':                return <MoreVertIcon/>;            case 'Settings':                return <SettingsIcon/>;            case 'Help center':                return <HelpCenterIcon/>;            case 'Sign out':                return <LogoutIcon/>;            default:                return <HomeIcon/>;        }    }    const handleDrawerOpen = () => {        setOpen((prevOpen: boolean) => !prevOpen); // Toggle between true and false    };    return (        <Box sx={{ display: 'flex' }}>            <CssBaseline />            <Drawer variant="permanent" open={open}>                <DrawerHeader>                    <IconButton onClick={handleDrawerOpen}>                        {open ? (theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />) : <ChevronRightIcon />}                    </IconButton>                </DrawerHeader>                <Divider />                <List>                    {items.map((text, index) => (                        <ListItem key={text} disablePadding sx={{ display: 'block' }}>                            <ListItemButton                                sx={{ minHeight: 48, justifyContent: open ? 'initial' : 'center', px: 2.5 }}                                onClick={() => getHrefForItem(text)}                            >                                <Box component="div" display="flex" alignItems="center">                                    <ListItemIcon                                        sx={{ minWidth: 0, mr: open ? 3 : 'auto', justifyContent: 'center' }}                                    >                                        {getIconForItem(text)}                                    </ListItemIcon>                                    <ListItemText                                        primary={text}                                        sx={{ opacity: open ? 1 : 0, width: open ? 'auto' : 0, color: 'primary.main' }}                                    />                                </Box>                            </ListItemButton>                        </ListItem>                    ))}                </List>            </Drawer>            <Dialog open={dialogOpen} onClose={handleModalClose}>                <TransactionList/>            </Dialog>        </Box>    );}